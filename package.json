{
  "name": "nester-develop",
  "displayName": "Nester Develop",
  "description": "Develop dotnet core apps for the nest.yt PaaS on your desktop",
  "version": "1.5.9",
  "publisher": "inkton",
  "icon": "images/nester-develop.png",
  "engines": {
    "vscode": "^1.30.2"
  },
  "activationEvents": [
    "onDebug",
    "onCommand:nester.unittestprocid",
    "onCommand:nester.dataup",
    "onCommand:nester.datadown",
    "onCommand:nester.viewdata",
    "onCommand:nester.viewqueue",
    "onCommand:nester.viewcicd",
    "onCommand:nester.select",
    "onCommand:nester.clean",
    "onCommand:nester.reset",
    "onCommand:nester.build",
    "onCommand:nester.unittestcleanbuild",
    "onCommand:nester.push",
    "onCommand:nester.pull",
    "onCommand:nester.checkout",
    "onCommand:nester.deploy",
    "onCommand:nester.kickci",
    "onCommand:nester.kickcd",
    "onCommand:nester.foldercreate",
    "onCommand:nester.folderfetch",
    "onCommand:nester.restore",
    "onCommand:nester.coreclrdown",
    "onCommand:nester.scaffoldup",
    "onCommand:nester.scaffolddown",
    "onCommand:nester.help",
    "workspaceContains:*.devkit",
    "workspaceContains:nest.json"
  ],
  "main": "./out/extension",
  "author": "Inkton",
  "categories": [
    "Debuggers",
    "Programming Languages"
  ],
  "dependencies": {
    "child-process-promise": "^2.2.1",
    "encodeurl": "1.0.2",
    "hidefile": "^2.0.0",
    "node-stream-zip": "1.7.0",
    "q": "^1.5.0",
    "remove-accents": "0.4.2",
    "simple-git": "^1.107.0",
    "tslint": "^5.12.1",
    "xml2js": "^0.4.17",
    "yamljs": "^0.2.10"
  },
  "bugs": {
    "url": "https://github.com/inkton/nester.develop/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/inkton/nester.develop.git"
  },
  "contributes": {
    "breakpoints": [
      {
        "language": "csharp"
      }
    ],
    "debuggers": [
      {
        "type": "coreclr",
        "label": ".NET Core @ Nest.yt",
        "configurationAttributes": {
          "launch": {
            "required": [
              "program"
            ],
            "properties": {
              "program": {
                "type": "string",
                "description": "Path to the application dll or .NET Core host executable to launch.\nThis property normally takes the form: '${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)'\nExample: '${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll'\n\nWhere:\n(target-framework) is the framework that the debugged project is being built for. This is normally found in the project file as the 'TargetFramework' property.\n(project-name.dll) is the name of debugged project's build output dll. This is normally the same as the project file name but with a '.dll' extension.",
                "default": "${workspaceFolder}/bin/Debug/<insert-target-framework-here>/<insert-project-name-here>.dll"
              },
              "cwd": {
                "type": "string",
                "description": "Path to the working directory of the program being debugged. Default is the current workspace.",
                "default": "${workspaceFolder}"
              },
              "args": {
                "anyOf": [
                  {
                    "type": "array",
                    "description": "Command line arguments passed to the program.",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  {
                    "type": "string",
                    "description": "Stringified version of command line arguments passed to the program.",
                    "default": ""
                  }
                ]
              },
              "stopAtEntry": {
                "type": "boolean",
                "description": "If true, the debugger should stop at the entry point of the target.",
                "default": false
              },
              "launchBrowser": {
                "description": "Describes options to launch a web browser as part of launch",
                "default": {
                  "enabled": true,
                  "args": "${auto-detect-url}",
                  "windows": {
                    "command": "cmd.exe",
                    "args": "/C start ${auto-detect-url}"
                  },
                  "osx": {
                    "command": "open"
                  },
                  "linux": {
                    "command": "xdg-open"
                  }
                },
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether web browser launch is enabled",
                    "default": true
                  },
                  "args": {
                    "default": "${auto-detect-url}",
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "Command line arguments passed to the program.",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "Stringified version of command line arguments passed to the program.",
                        "default": ""
                      }
                    ]
                  },
                  "osx": {
                    "description": "OSX-specific web launch configuration options",
                    "default": {
                      "command": "open"
                    },
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to execute for launching the web browser",
                        "default": "open"
                      },
                      "args": {
                        "type": "string",
                        "description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
                        "default": "${auto-detect-url}"
                      }
                    }
                  },
                  "linux": {
                    "description": "Linux-specific web launch configuration options",
                    "default": {
                      "command": "xdg-open"
                    },
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to execute for launching the web browser",
                        "default": "xdg-open"
                      },
                      "args": {
                        "type": "string",
                        "description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
                        "default": "${auto-detect-url}"
                      }
                    }
                  },
                  "windows": {
                    "description": "Windows-specific web launch configuration options",
                    "default": {
                      "command": "cmd.exe",
                      "args": "/C start ${auto-detect-url}"
                    },
                    "type": "object",
                    "properties": {
                      "command": {
                        "type": "string",
                        "description": "The command to execute for launching the web browser",
                        "default": "cmd.exe"
                      },
                      "args": {
                        "type": "string",
                        "description": "The arguments to pass to the command to open the browser. Use ${auto-detect-url} to automatically use the address the server is listening to",
                        "default": "${auto-detect-url}"
                      }
                    }
                  }
                }
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables passed to the program.",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "description": "Environment variables passed to the program by a file.",
                "default": "${workspaceFolder}/.env"
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "Output to the VS Code Debug Console. This doesn't support reading console input (ex:Console.ReadLine)",
                  "VS Code's integrated terminal",
                  "External terminal that can be configured via user settings"
                ],
                "description": "Where to launch the debug target.",
                "default": "internalConsole"
              },
              "externalConsole": {
                "type": "boolean",
                "description": "Attribute 'externalConsole' is deprecated, use 'console' instead.",
                "default": false
              },
              "sourceFileMap": {
                "type": "object",
                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
                "additionalProperties": {
                  "type": "string"
                },
                "default": {
                  "<insert-source-path-here>": "<insert-target-path-here>"
                }
              },
              "justMyCode": {
                "type": "boolean",
                "description": "Optional flag to only show user code.",
                "default": true
              },
              "requireExactSource": {
                "type": "boolean",
                "description": "Optional flag to require current source code to match the pdb.",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "description": "Optional flag to enable stepping over Properties and Operators.",
                "default": true
              },
              "logging": {
                "description": "Optional flags to determine what types of messages should be logged to the output window.",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether exception messages should be logged to the output window.",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether module load events should be logged to the output window.",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
                    "default": false
                  },
                  "browserStdOut": {
                    "type": "boolean",
                    "description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
                    "default": true
                  }
                }
              },
              "pipeTransport": {
                "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
                "type": "object",
                "required": [
                  "debuggerPath"
                ],
                "default": {
                  "pipeCwd": "${workspaceFolder}",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "The fully qualified path to the working directory for the pipe program.",
                    "default": "${workspaceFolder}"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "The fully qualified pipe command to execute.",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                        "default": ""
                      }
                    ],
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "The full path to the debugger on the target machine.",
                    "default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the pipe program.",
                    "default": {}
                  },
                  "quoteArgs": {
                    "type": "boolean",
                    "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                    "default": true
                  },
                  "windows": {
                    "description": "Windows-specific pipe launch configuration options",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "The fully qualified path to the working directory for the pipe program.",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "The fully qualified pipe command to execute.",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Environment variables passed to the pipe program.",
                        "default": {}
                      }
                    }
                  },
                  "osx": {
                    "description": "OSX-specific pipe launch configuration options",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "The fully qualified path to the working directory for the pipe program.",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "The fully qualified pipe command to execute.",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Environment variables passed to the pipe program.",
                        "default": {}
                      }
                    }
                  },
                  "linux": {
                    "description": "Linux-specific pipe launch configuration options",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "The fully qualified path to the working directory for the pipe program.",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "The fully qualified pipe command to execute.",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Environment variables passed to the pipe program.",
                        "default": {}
                      }
                    }
                  }
                }
              },
              "suppressJITOptimizations": {
                "type": "boolean",
                "description": "If true, when an optimized module (.dll compiled in the Release configuration) loads in the target process, the debugger will ask the Just-In-Time compiler to generate code with optimizations disabled. For more information: https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations",
                "default": false
              },
              "symbolOptions": {
                "description": "Options to control how symbols (.pdb files) are found and loaded.",
                "default": {
                  "searchPaths": [],
                  "searchMicrosoftSymbolServer": false
                },
                "type": "object",
                "properties": {
                  "searchPaths": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of symbol server URLs (example: http​://MyExampleSymbolServer) or directories (example: /build/symbols) to search for .pdb files. These directories will be searched in addition to the default locations -- next to the module and the path where the pdb was originally dropped to.",
                    "default": []
                  },
                  "searchMicrosoftSymbolServer": {
                    "type": "boolean",
                    "description": "If 'true' the Microsoft Symbol server (https​://msdl.microsoft.com​/download/symbols) is added to the symbols search path. If unspecified, this option defaults to 'false'.",
                    "default": false
                  },
                  "cachePath": {
                    "type": "string",
                    "description": "Directory where symbols downloaded from symbol servers should be cached. If unspecified, on Windows the debugger will default to %TEMP%\\SymbolCache, and on Linux and macOS the debugger will default to ~/.vsdbg/SymbolCache.",
                    "default": "~/.vsdbg/SymbolCache"
                  },
                  "moduleFilter": {
                    "description": "Provides options to control which modules (.dll files) the debugger will attempt to load symbols (.pdb files) for.",
                    "default": {
                      "mode": "loadAllButExcluded",
                      "excludedModules": []
                    },
                    "type": "object",
                    "required": [
                      "mode"
                    ],
                    "properties": {
                      "mode": {
                        "type": "string",
                        "enum": [
                          "loadAllButExcluded",
                          "loadOnlyIncluded"
                        ],
                        "enumDescriptions": [
                          "Load symbols for all modules unless the module is in the 'excludedModules' array.",
                          "Do not attempt to load symbols for ANY module unless it is in the 'includedModules' array, or it is included through the 'includeSymbolsNextToModules' setting."
                        ],
                        "description": "Controls which of the two basic operating modes the module filter operates in.",
                        "default": "loadAllButExcluded"
                      },
                      "excludedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Array of modules that the debugger should NOT load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadAllButExcluded'.",
                        "default": []
                      },
                      "includedModules": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Array of modules that the debugger should load symbols for. Wildcards (example: MyCompany.*.dll) are supported.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
                        "default": [
                          "MyExampleModule.dll"
                        ]
                      },
                      "includeSymbolsNextToModules": {
                        "type": "boolean",
                        "description": "If true, for any module NOT in the 'includedModules' array, the debugger will still check next to the module itself and the launching executable, but it will not check paths on the symbol search list. This option defaults to 'true'.\n\nThis property is ignored unless 'mode' is set to 'loadOnlyIncluded'.",
                        "default": true
                      }
                    }
                  }
                }
              },
              "sourceLinkOptions": {
                "description": "Options to control how Source Link connects to web servers. For more information: https://aka.ms/VSCode-CS-LaunchJson#source-link-options",
                "default": {
                  "*": {
                    "enabled": true
                  }
                },
                "type": "object",
                "additionalItems": {
                  "type": "object",
                  "properties": {
                    "enabled": {
                      "title": "boolean",
                      "description": "Is Source Link enabled for this URL?  If unspecified, this option defaults to 'true'.",
                      "default": "true"
                    }
                  }
                }
              }
            },
            "type": "object"
          },
          "attach": {
            "type": "object",
            "required": [],
            "properties": {
              "processName": {
                "type": "string",
                "description": "",
                "default": "The process name to attach to. If this is used, 'processId' should not be used."
              },
              "processId": {
                "anyOf": [
                  {
                    "type": "string",
                    "description": "The process id to attach to. Use \"${command:pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
                    "default": "${command:pickProcess}"
                  },
                  {
                    "type": "integer",
                    "description": "The process id to attach to. Use \"${command:pickProcesss}\" to get a list of running processes to attach to. If 'processId' used, 'processName' should not be used.",
                    "default": 0
                  }
                ]
              },
              "sourceFileMap": {
                "type": "object",
                "description": "Optional source file mappings passed to the debug engine. Example: '{ \"C:\\foo\":\"/home/user/foo\" }'",
                "additionalProperties": {
                  "type": "string"
                },
                "default": {
                  "<insert-source-path-here>": "<insert-target-path-here>"
                }
              },
              "justMyCode": {
                "type": "boolean",
                "description": "Optional flag to only show user code.",
                "default": true
              },
              "env": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "description": "Environment variables passed to the program.",
                "default": {}
              },
              "envFile": {
                "type": "string",
                "description": "Environment variables passed to the program by a file.",
                "default": "${workspaceFolder}/.env"
              },
              "requireExactSource": {
                "type": "boolean",
                "description": "Optional flag to require current source code to match the pdb.",
                "default": true
              },
              "enableStepFiltering": {
                "type": "boolean",
                "description": "Optional flag to enable stepping over Properties and Operators.",
                "default": true
              },
              "logging": {
                "description": "Optional flags to determine what types of messages should be logged to the output window.",
                "type": "object",
                "required": [],
                "default": {},
                "properties": {
                  "exceptions": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether exception messages should be logged to the output window.",
                    "default": true
                  },
                  "moduleLoad": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether module load events should be logged to the output window.",
                    "default": true
                  },
                  "programOutput": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether program output should be logged to the output window when not using an external console.",
                    "default": true
                  },
                  "engineLogging": {
                    "type": "boolean",
                    "description": "Optional flag to determine whether diagnostic engine logs should be logged to the output window.",
                    "default": false
                  },
                  "browserStdOut": {
                    "type": "boolean",
                    "description": "Optional flag to determine if stdout text from the launching the web browser should be logged to the output window.",
                    "default": true
                  }
                }
              },
              "pipeTransport": {
                "description": "When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the .NET Core debugger backend executable (vsdbg).",
                "type": "object",
                "required": [
                  "debuggerPath"
                ],
                "default": {
                  "pipeCwd": "${workspaceFolder}",
                  "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                  "pipeArgs": [],
                  "debuggerPath": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                },
                "properties": {
                  "pipeCwd": {
                    "type": "string",
                    "description": "The fully qualified path to the working directory for the pipe program.",
                    "default": "${workspaceFolder}"
                  },
                  "pipeProgram": {
                    "type": "string",
                    "description": "The fully qualified pipe command to execute.",
                    "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                  },
                  "pipeArgs": {
                    "anyOf": [
                      {
                        "type": "array",
                        "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      {
                        "type": "string",
                        "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                        "default": ""
                      }
                    ],
                    "default": []
                  },
                  "debuggerPath": {
                    "type": "string",
                    "description": "The full path to the debugger on the target machine.",
                    "default": "enter the path for the debugger on the target machine, for example ~/vsdbg/vsdbg"
                  },
                  "pipeEnv": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Environment variables passed to the pipe program.",
                    "default": {}
                  },
                  "quoteArgs": {
                    "type": "boolean",
                    "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                    "default": true
                  },
                  "windows": {
                    "description": "Windows-specific pipe launch configuration options",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example 'c:\\tools\\plink.exe'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "The fully qualified path to the working directory for the pipe program.",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "The fully qualified pipe command to execute.",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Environment variables passed to the pipe program.",
                        "default": {}
                      }
                    }
                  },
                  "osx": {
                    "description": "OSX-specific pipe launch configuration options",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "The fully qualified path to the working directory for the pipe program.",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "The fully qualified pipe command to execute.",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Environment variables passed to the pipe program.",
                        "default": {}
                      }
                    }
                  },
                  "linux": {
                    "description": "Linux-specific pipe launch configuration options",
                    "default": {
                      "pipeCwd": "${workspaceFolder}",
                      "pipeProgram": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'",
                      "pipeArgs": []
                    },
                    "type": "object",
                    "properties": {
                      "pipeCwd": {
                        "type": "string",
                        "description": "The fully qualified path to the working directory for the pipe program.",
                        "default": "${workspaceFolder}"
                      },
                      "pipeProgram": {
                        "type": "string",
                        "description": "The fully qualified pipe command to execute.",
                        "default": "enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'"
                      },
                      "pipeArgs": {
                        "anyOf": [
                          {
                            "type": "array",
                            "description": "Command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "items": {
                              "type": "string"
                            },
                            "default": []
                          },
                          {
                            "type": "string",
                            "description": "Stringified version of command line arguments passed to the pipe program. Token ${debuggerCommand} in pipeArgs will get replaced by the full debugger command, this token can be specified inline with other arguments. If ${debuggerCommand} isn’t used in any argument, the full debugger command will be instead be added to the end of the argument list.",
                            "default": ""
                          }
                        ],
                        "default": []
                      },
                      "quoteArgs": {
                        "type": "boolean",
                        "description": "Should arguments that contain characters that need to be quoted (example: spaces) be quoted? Defaults to 'true'. If set to false, the debugger command will no longer be automatically quoted.",
                        "default": true
                      },
                      "pipeEnv": {
                        "type": "object",
                        "additionalProperties": {
                          "type": "string"
                        },
                        "description": "Environment variables passed to the pipe program.",
                        "default": {}
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "enableBreakpointsFor": {
          "languageIds": [
            "csharp",
            "razor"
          ]
        },
        "adapterExecutableCommand": "nester.debug",
        "variables": {
          "unitTestProcId": "nester.unittestprocid"
        }
      }
    ],
    "commands": [
      {
        "command": "nester.dataup",
        "title": "Nest Data Up"
      },
      {
        "command": "nester.datadown",
        "title": "Nest Data Down"
      },
      {
        "command": "nester.viewdata",
        "title": "Nest View Data"
      },
      {
        "command": "nester.viewqueue",
        "title": "Nest View Queue"
      },
      {
        "command": "nester.viewcicd",
        "title": "Nest View Ci/Cd"
      },
      {
        "command": "nester.select",
        "title": "Nest Select"
      },
      {
        "command": "nester.clean",
        "title": "Nest Clean"
      },
      {
        "command": "nester.reset",
        "title": "Nest Reset"
      },
      {
        "command": "nester.kill",
        "title": "Nest Kill"
      },
      {
        "command": "nester.build",
        "title": "Nest Build"
      },
      {
        "command": "nester.unittestcleanbuild",
        "title": "Nest Unit Test Clean Build"
      },
      {
        "command": "nester.pull",
        "title": "Nest Pull"
      },
      {
        "command": "nester.push",
        "title": "Nest Push"
      },
      {
        "command": "nester.checkout",
        "title": "Nest Checkout"
      },
      {
        "command": "nester.deploy",
        "title": "Nest Deploy"
      },
      {
        "command": "nester.kickci",
        "title": "Nest Kick Ci"
      },
      {
        "command": "nester.kickcd",
        "title": "Nest Kick Cd"
      },
      {
        "command": "nester.foldercreate",
        "title": "Nest Folder Create"
      },
      {
        "command": "nester.folderfetch",
        "title": "Nest Folder Fetch"
      },
      {
        "command": "nester.restore",
        "title": "Nest Restore"
      },
      {
        "command": "nester.coreclrdown",
        "title": "Nest CoreCLR Down"
      },
      {
        "command": "nester.scaffoldup",
        "title": "Nest Scaffold Up"
      },
      {
        "command": "nester.scaffolddown",
        "title": "Nest Scaffold Down"
      },
      {
        "command": "nester.help",
        "title": "Nest Help"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "test": "npm run compile && node ./node_modules/vscode/bin/test",
    "postinstall": "node ./node_modules/vscode/bin/install"
  },
  "devDependencies": {
    "@types/mocha": "^2.2.48",
    "@types/node": "^7.10.2",
    "typescript": "^2.9.2",
    "vscode": "^1.1.28"
  }
}
